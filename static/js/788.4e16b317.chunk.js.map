{"version":3,"file":"static/js/788.4e16b317.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactFormStyles.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListStyles.js","components/ContactList/ContactList.jsx","components/Filter/FilterStyles.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n  margin-top: 20px;\n  margin-left: 20px;\n  box-sizing: border-box;\n  width: 400px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const Span = styled.span`\n  display: block;\n  margin-bottom: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin-bottom: 15px;\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: #4caf50;\n  color: #fff;\n  border: none;\n  padding: 12px 20px;\n  font-size: 18px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #45a049;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { nanoid } from 'nanoid';\nimport {\n  FormContainer,\n  Label,\n  Span,\n  Input,\n  SubmitButton,\n} from './ContactFormStyles';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const addName = evt => {\n    return setName(evt.currentTarget.value);\n  };\n\n  const addNumber = evt => {\n    return setNumber(evt.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isContactExists = contacts.some(contact => contact.name === name);\n\n    if (isContactExists) {\n      toast.warn(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(\n      addContact({\n        id: nanoid(),\n        name,\n        number,\n      })\n    );\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormContainer onSubmit={handleSubmit}>\n      <Label>\n        <Span> Name</Span>\n\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={name}\n          onChange={addName}\n          required\n        />\n      </Label>\n      <Label>\n        <Span> Number</Span>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={number}\n          onChange={addNumber}\n          required\n        />\n      </Label>\n      <SubmitButton type=\"submit\">Add contact</SubmitButton>\n    </FormContainer>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const ContactListStyled = styled.ul`\n  padding: 0;\n  margin-top: 20px;\n  margin-left: 20px;\n`;\n\nexport const ContactListItem = styled.li`\n  width: 400px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  margin-bottom: 10px;\n\n  &:hover {\n    background-color: #e0e0e0;\n  }\n`;\n\nexport const ContactName = styled.span`\n  font-weight: bold;\n`;\n\nexport const DeleteButton = styled.button`\n  background-color: #ff4f4f;\n  color: #fff;\n  border: none;\n  padding: 5px 10px;\n  font-size: 14px;\n  border-radius: 3px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #ff3333;\n  }\n`;\n","import React from 'react';\nimport {\n  ContactListStyled,\n  ContactListItem,\n  ContactName,\n  DeleteButton,\n} from './ContactListStyles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <>\n      <ContactListStyled>\n        {visibleContacts.map(contact => {\n          return (\n            <ContactListItem key={contact.id}>\n              <span>\n                <ContactName>{contact.name}</ContactName>: {contact.number}\n              </span>\n              <DeleteButton\n                type=\"button\"\n                onClick={() => handleDeleteContact(contact.id)}\n              >\n                Delete\n              </DeleteButton>\n            </ContactListItem>\n          );\n        })}\n      </ContactListStyled>\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.label`\n  display: block;\n  margin-top: 20px;\n  margin-left: 20px;\n  width: 400px;\n  margin-bottom: 10px;\n`;\n\nexport const FilterLabel = styled.span`\n  display: block;\n  font-size: 20px;\n  margin-bottom: 10px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 300px;\n  padding: 10px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FilterContainer, FilterLabel, FilterInput } from './FilterStyles';\nimport { addFilter } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    dispatch(addFilter(e.currentTarget.value));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel>Find contacts by name</FilterLabel>\n      <FilterInput type=\"text\" value={filter} onChange={handleFilter} />\n    </FilterContainer>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","FormContainer","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Span","_templateObject3","Input","_templateObject4","SubmitButton","_templateObject5","dispatch","useDispatch","contacts","useSelector","getContacts","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","_jsxs","onSubmit","e","preventDefault","some","contact","toast","concat","addContact","children","_jsx","type","pattern","title","value","onChange","evt","currentTarget","required","ContactListStyled","ContactListItem","ContactName","DeleteButton","filter","state","visibleContacts","toLowerCase","includes","_Fragment","map","onClick","deleteContact","FilterContainer","FilterLabel","FilterInput","addFilter","useEffect","fetchContacts","ContactForm","Filter","ContactList"],"sourceRoot":""}